"""@package ms_stack_transformer

Lark AST transformer to generate XLM_Objects from an AST generated by ms_xlm.bnf.
"""

from __future__ import print_function
import string

from lark import Transformer

from XLM.stack_item import *
from XLM.XLM_Object import *

####################################################################
class MsStackTransformer(Transformer):
    """
    Lark AST transformer to generate XLM_Objects from an AST generated by ms_xlm.bnf.
    """

    ##########################################################
    ## Non-terminal Transformers
    ##########################################################

    def start(self, items):
        print("****    START")
        print(items)
        return items

    def function_call(self, items):
        print("****    function_call")
        print(items)
        return items
    
    def method_call(self, items):
        print("****    method_call")
        print(items)
        return items
    
    def arglist(self, items):
        print("****    arglist")
        print(items)
        return items
    
    def argument(self, items):
        print("****    argument")
        print(items)
        return items[0]
    
    def cell(self, items):
        print("****    cell")
        print(items)
        return items
    
    def a1_notation_cell(self, items):
        print("****    a1_notation_cell")
        print(items)
        return items
    
    def r1c1_notation_cell(self, items):
        print("****    r1c1_notation_cell")
        print(items)
        return items
    
    def expression(self, items):
        print("****    expression")
        print(items)
        return items
    
    def concat_expression(self, items):
        print("****    concat_expression")
        print(items)
        return items
    
    def additive_expression(self, items):
        print("****    additive_expression")
        print(items)
        return items
    
    def multiplicative_expression(self, items):
        print("****    multiplicative_expression")
        print(items)
        return items
    
    def final(self, items):
        return items
    
    def atom(self, items):
        return items
    
    def ADDITIVEOP(self, items):
        return items[0]
    
    def MULTIOP(self, items):
        return items[0]
    
    def CMPOP(self, items):
        return items[0]
    
    def CONCATOP(self, items):
        return items[0]
    
    def STRING(self, items):
        return stack_str(items[1:-1])
    
    def BOOLEAN(self, items):
        return stack_bool(items[0])
    
    def ROW(self, items):
        print("****    ROW")
        print(items)
        return items[0]
    
    def COL(self, items):
        print("****    COL")
        print(items)
        return items[0]
        
    def REF(self, items):
        print("****    REF")
        print(items)
        return items
    
    def NAME(self, items):
        print("****    NAME")
        print(items)
        return str(items)
    
    def SIGNED_INT(self, items):
        return int(items[0])
    
    def INT(self, items):
        return int(items[0])
    
    def DECIMAL(self, items):
        return float(items[0])
    
    def SIGNED_DECIMAL(self, items):
        return float(items[0])
    
    def NUMBER(self, items):
        print("****    NUMBER")
        print(items)
        return stack_int(items[0])
    
